#!/usr/bin/env bash

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# This was just made for an old Debain VM because I got bored one day. 
# It's super inefficient and has quite a few bugs, so be warned. 

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

confdir="$HOME/.config/wfetch"
conffile="$confdir/wfetch.conf"

# Read configuration
if [ -f "$conffile" ]; then
	source "$conffile"
fi

if [[ "$shellstartup" == 'false' ]] && [[ "$1" == 'shellstartup' ]]; then
	exit
fi

# Declare functions
function normalizeLength() # Keeps the length of lines consistent
{
text="$1"
textprepend="$2"
textappend="$3"
fulltext="$textprepend$text$textappend"

inputlen="${#fulltext}"
textcut=$((fixedwidth-inputlen))
textedit="$text"

repeat='2' # TODO Figure out why this needs to start at 2. Where are the extra two spaces coming from when this is 0?
while [ $repeat -le $textcut ]
do
        textedit="$textedit "
        ((repeat++))
done
	echo "$textprepend$textedit$textappend"
}

# TODO Make these follow the defined fixedwidth
function boxTop()
{
	echo "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"
}

function boxMiddle()
{
	echo "┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫"
}

function doubleBoxMiddle()
{
	echo "┣══════════════════════════════════════════════════════════════┫"
}

function boxBottom()
{
	echo "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"
}

function lightDoubleDashBoxMiddle()
{
	echo "┠╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┨"
}

function lightTripleDashBoxMiddle()
{
	echo "┠┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┨"
}

function lightQuadDashBoxMiddle()
{
	echo "┠┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┨"
}

if [[ ${#bannertext} == '0' ]]; then
	bannertext="$confdir/bannertext"
	if not [ -e $bannertext ]; then
		echo "Banner text at $bannertext not found. Disabling.
Set usebannertext='false' in $conffile to ignore this message."
		usebannertext='false'
	fi
fi

. /etc/os-release
fullosname=$PRETTY_NAME
kernelnamevertext="$(uname -s) $(uname -r)"
uptime=$(uptime -p | awk '{ print $2, $3, $4, $5 }')
gpudev=$(glxinfo | grep -i "OpenGL renderer string: Mesa ")
gpudev=${gpudev:29:50}
cpuname=$(grep -i model\ name /proc/cpuinfo | awk ' NR==1{ print }' | cut -d' ' -f 4- )
cpuusage=$(echo $(top -bn1 | grep "%Cpu(s):  ")| awk '{ print $2 }')
memorytotal=$(echo "$(echo "$(free -h | grep "Mem:")" | awk '{ print $2 }')")
memoryused=$(echo "$(free -h | grep "Mem:")" | awk '{ print $3 }')
memoryusageratio="$memoryused/$memorytotal"

# Show Data
#clear
boxTop
if [[ "$usebannertext" == 'true' ]]; then
	cat $bannertext
	boxMiddle
fi

#Show user info
normalizeLength "You are logged in as $USER with the UID $UID" "┃ " "┃"
boxMiddle

#Show device info
normalizeLength "Operating System Info: " "┃ " "┃"
lightDoubleDashBoxMiddle
normalizeLength "Operating System: $fullosname" "┃ " "┃"
normalizeLength "Kernel: $kernelnamevertext" "┃ " "┃"
normalizeLength "System Uptime: $uptime" "┃ " "┃"
normalizeLength "Host: $(hostname)" "┃ " "┃"
boxMiddle
normalizeLength "Hardware: " "┃ " "┃"
lightDoubleDashBoxMiddle
normalizeLength "GPU: $gpudev" "┃ " "┃"
normalizeLength "CPU: $cpuname" "┃ " "┃"
boxMiddle
normalizeLength "System Resources: " "┃ " "┃"
lightDoubleDashBoxMiddle
normalizeLength "CPU Usage: $cpuusage%" "┃ " "┃"
normalizeLength "Memory Used: $memoryusageratio" "┃ " "┃"

boxBottom
