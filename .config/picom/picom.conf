#################################
#             Shadows           #
#################################


# Enabled client-side shadows on windows. Note desktop windows
# (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
# unless explicitly requested using the wintypes option.
#
# Can be set per-window using rules.
#
# Default: false
shadow = true;

# The blur radius for shadows, in pixels.
#
# Default: 12
shadow-radius = 6;

# The opacity of shadows.
#
# Range: 0.0 - 1.0
# Default: 0.75
#shadow-opacity = .75

# The left offset for shadows, in pixels.
#
# Default: -15
shadow-offset-x = -2;

# The top offset for shadows, in pixels.
#
# Default: -15
shadow-offset-y = -2;

# Hex string color value of shadow. Formatted like "#RRGGBB", e.g. "#C0FFEE".
#
# Default: #000000
#shadow-color = "#000000"

# Crop shadow of a window fully on a particular monitor to that monitor. This is
# currently implemented using the X RandR extension.
#
# Default: false
crop-shadow-to-monitor = true

# TODO Convert to window rule
# Specify a list of conditions of windows that should have no shadow.
#
# examples:
#   shadow-exclude = "n:e:Notification";
#shadow-exclude = [
#  "name = 'Notification'",
#  "class_g = 'Conky'",
#  "class_g ?= 'Notify-osd'",
#  "class_g = 'Cairo-clock'",
#  "_GTK_FRAME_EXTENTS@:c",
#  "class_g = 'Rofi'",
#  "class_g = 'Ulauncher'",
# Fix annoying shadow from elements of i3 like the tab bar
#  "class_i = 'i3-frame'"
#];

# TODO Convert to window rule
# Specify a list of conditions of windows that should have no shadow painted over, such as a dock window.
# clip-shadow-above = []

# TODO Convert to window rule
# Specify a X geometry that describes the region in which shadow should not
# be painted in, such as a dock window region. Use
#    shadow-exclude-reg = "x10+0+0"
# for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
#
# shadow-exclude-reg = ""


#################################
#           Fading              #
#################################


# Fade windows in/out when opening/closing and when opacity changes,
#  unless no-fading-openclose is used.
fading = false

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
fade-in-step = 0.03;

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-out-step = 0.03;

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 3

# Do not fade on window open/close.
#no-fading-openclose = false

# Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
#no-fading-destroyed-argb = false


#################################
#   Transparency / Opacity      #
#################################

# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
# inactive-opacity = 1
#inactive-opacity = 0.98;

# Opacity of window titlebars and borders.
#
# Range: 0.1 - 1.0
# Default: 1.0 (disabled)
frame-opacity = 1.0

# Let inactive opacity set by -i override the '_NET_WM_WINDOW_OPACITY' values of windows.
# inactive-opacity-override = true
inactive-opacity-override = false

# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
#active-opacity = 1.0

# Use fixed inactive dim value, instead of adjusting according to window opacity.
#
# Default: false
inactive-dim-fixed = true

# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
inactive-dim = 0.1

## TODO Convert to window rule
# Specify a list of conditions of windows that should never be considered focused.
# focus-exclude = []
focus-exclude = [ 
  "class_g = 'Cairo-clock'",
  "name = 'KDE Connect Daemon'"
];

## TODO Convert to window rule
# Specify a list of opacity rules, in the format `PERCENT:PATTERN`,
# like `50:name *= "Firefox"`. picom-trans is recommended over this.
# Note we don't make any guarantee about possible conflicts with other
# programs that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.
# example:
#    opacity-rule = [ "80:class_g = 'URxvt'" ];
#
# opacity-rule = []


#################################
#           Corners             #
#################################

# Sets the radius of rounded window corners. When > 0, the compositor will
# round the corners of windows. Does not interact well with
# `transparent-clipping`.
#
# Default: 0 (disabled)
corner-radius = 10

# TODO: Move this to a window rule
# Exclude conditions for rounded corners.
rounded-corners-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'",
  "class_g = 'i3-frame'"
];


#################################
#             Blur              #
#################################


# Parameters for background blurring, see BLUR section in the man page for more information.
#blur-method =
#blur-size = 3
#
#blur-deviation = false
#
#blur-strength = 5

# Blur background of semi-transparent / ARGB windows.
# Can be set per-window using rules.
#
# Default: false
blur-background = true;

# Blur background of windows when the window frame is not opaque.
# Implies:
#    blur-background
#
# Default: false
#blur-background-frame = false

# Use fixed blur strength rather than adjusting according to window opacity.
# 
# Default: false
#blur-background-fixed = false


# Specify the blur convolution kernel, with the following format:
# example:
#   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
# Can also be a pre-defined kernel, see the man page.
#
# Default: ""
#blur-kern = "3x3box";


# TODO: Move this to a window rule
# Exclude conditions for background blur.
# blur-background-exclude = []
blur-background-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'",
  "_GTK_FRAME_EXTENTS@:c",
  "class_g = 'Ulauncher'",
  "name = 'KDE Connect Daemon'",
  "role   = 'xborder'"
];


#################################
#         Window Rules          #
#################################


rules = (
	{ match = "fullscreen"; 
		# Disable rounded corners in fullscreen
		corner-radius = 0;
	},
	{ role = "xborder";
		# Exempt xborder from background blur
		blur-background = false;
	},
	# Generic window rules
	{ window_type = "desktop";
		window-shader-fg = "default";
		shadow = true;
	},
	{ match = "class_g = 'i3-frame'";
		corner-radius = 0;
		window-shader-fg-rule = "default";
		#shadow = false;
		#shadow-offset-x = -18;
		#shadow-offset-y = -18;
	},
	{ match = "window_type = 'dock'";
		corner-radius = 0;
		shadow = true;
		shadow-offset-x = -24;
		shadow-offset-y = 0;
		animations = ({
			triggers = [ "open", "close", "show", "hide" ];
			#preset = "fly-in"; 
			#direction = "up";
			duration = 0; 
		})
	},
	{ match = "_NET_WM_STATE@[*] *= '_NET_WM_STATE_HIDDEN'";
		shadow = false;
	},
	# Fix a multitude of issues with Firefox, Zen Browser, and some other menus. 
	{ match = "window_type = 'menu' || window_type = 'popup_menu' || window_type = 'utility'";
		# Disable odd shadows in some menus
		shadow = false;
		# Disable animations for menus
		animations = ({
			triggers = [ "open", "show" ];
			preset = "appear"; 
			duration = 0.05; 
		})
		animations = ({
			triggers = [ "close", "hide" ];
			preset = "disappear"; 
			duration = 0.05; 
		})
		blur-background = false;
	},
	# Rofi configuration
	{ match = "class_i = 'rofi'";
		animations = ({
			triggers = [ "open", "show" ];
			preset = "slide-in"; 
			direction = "down";
			duration = 0.15; 
		},
		{
			triggers = [ "close", "hide" ];
			preset = "slide-out"; 
			direction = "down";
			duration = 0.15; 
		})
		blur-background = true;
		blur: 
		{
			method = "gaussian"
			size = 10
			strength = 10
		};
	},
	{ match = "class_g = 'conky_bg'";
		#shadow = false;
		#blur-background = false;
	},
	{ match = "name = 'Albert'";
		shadow = false;
		blur-background = false;
		animations = ({
			triggers = [ "open", "show" ];
			preset = "fly-in"; 
			direction = "up";
			duration = 0.15; 
		},
		{
			triggers = [ "close", "hide" ];
			preset = "fly-out"; 
			direction = "up";
			duration = 0.15; 
		},
		{
			triggers = [ "geometry" ];
			duration = 0; 
		})
	},
	{ match = "class_g = '*screensaver*' || '*locker*'";
		animations = ({
			triggers = [ "open", "close", "show", "hide" ];
			duration = 0;
		})
	},
)


#################################
#	   Animations		#
#################################


animations = ({
# Window Open/Close
	triggers = [ "open", "show" ]; 
	preset = "appear"; 
	#direction = "up";
	duration = 0.15;
	#curve = "cubic-bezier(0.25, 0.1, 0.25, 1.0)";
}, {
	triggers = [ "close", "hide" ]; 
	preset = "disappear"; 
	#direction = "down";
	duration = 0.15;
	#curve = "cubic-bezier(0.25, 0.1, 0.25, 1.0)";
}, {
# Window Move
	triggers = [ "geometry" ];
	preset = "geometry-change";
	duration = 0.25;
})

#################################
#       General Settings        #
#################################

# Enable remote control via D-Bus. See the man page for more details.
# dbus = true

# Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
# daemon = false

# Specify the backend to use: `xrender`, `glx`, or `egl`.
#
# Default: "xrender"
backend = "glx";

# Use higher precision during rendering, and apply dither when presenting the
# rendered screen. Reduces banding artifacts, but may cause performance
# degradation. Only works with OpenGL.
dithered-present = false;

# Enable/disable VSync.
#
# Default: false
vsync = true;

# Try to detect windows with rounded corners and don't consider them
# shaped windows. The accuracy is not very high, unfortunately.
#
# Has nothing to do with `corner-radius`.
#
# Default: false
detect-rounded-corners = true;

# Detect '_NET_WM_WINDOW_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_WINDOW_OPACITY' of client windows to frame windows.
#
# Default: false
detect-client-opacity = true;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
# rather than listening to 'FocusIn'/'FocusOut' event. May be more accurate,
# provided that the WM supports it.
#
# Default: false
#use-ewmh-active-win = false

# Unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows. Known to cause flickering
# when redirecting/unredirecting windows.
#
# Default: false
#unredir-if-possible = false

# Delay before unredirecting the window, in milliseconds.
#
# Default: 0.
#unredir-if-possible-delay = 0

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
#
# Default: false
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. This usually means windows from the same application
# will be considered focused or unfocused at the same time.
# 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
#
# Default: false
#detect-client-leader = false

# Use of damage information for rendering. This cause the only the part of the
# screen that has actually changed to be redrawn, instead of the whole screen
# every time. Should improve performance.
#
# Default: false
use-damage = true;

# Use X Sync fence to wait for the completion of rendering of other windows,
# before using their content to render the current screen.
#
# Required for explicit sync drivers, such as nvidia.
#
# Default: false
#xrender-sync-fence = false

# GLX backend: Use specified GLSL fragment shader for rendering window
# contents. Read the man page for a detailed explanation of the interface.
#
# Can be set per-window using rules.
#
#window-shader-fg = "default"

# Force all windows to be painted with blending. Useful if you
# have a `window-shader-fg` that could turn opaque pixels transparent.
#
# Default: false
# force-win-blend = false

# Specify a list of conditions of windows that should be painted with inverted color.
# Resource-hogging, and is not well tested.
#
# invert-color-include = []

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
#
glx-no-stencil = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
#
# glx-no-rebind-pixmap = false

# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
#
# xrender-sync-fence = false

# Use rules to set per-window shaders. Syntax is SHADER_PATH:PATTERN, similar
# to opacity-rule. SHADER_PATH can be "default". This overrides window-shader-fg.
#
# window-shader-fg-rule = [
#   "my_shader.frag:window_type != 'dock'"
# ]

# Do not use EWMH to detect fullscreen windows.
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
#
# no-ewmh-fullscreen = false

# Dimming bright windows so their brightness doesn't exceed this set value.
# Brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
#
# max-brightness = 1.0

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
#
# transparent-clipping = false

# Specify a list of conditions of windows that should never have transparent
# clipping applied. Useful for screenshot tools, where you need to be able to
# see through transparent parts of the window.
#
# transparent-clipping-exclude = []

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case doesn't matter.
# If using the "TRACE" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
#
# log-level = "debug"
log-level = "warn";

# Set the log file.
# If *--log-file* is never specified, logs will be written to stderr.
# Otherwise, logs will to written to the given file, though some of the early
# logs might still be written to the stderr.
# When setting this option from the config file, it is recommended to use an absolute path.
#
# log-file = "/path/to/your/log/file"

# Show all X errors (for debugging)
# show-all-xerrors = false

# Write process ID to a file.
# write-pid-path = "/path/to/your/log/file"

# Window type settings
#
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
#     "tooltip", "notification", "combo", and "dnd".
#
# Following per window-type options are available: ::
#
#   fade, shadow:::
#     Controls window-type-specific shadow and fade settings.
#
#   opacity:::
#     Controls default opacity of the window type.
#
#   focus:::
#     Controls whether the window of this type is to be always considered focused.
#     (By default, all window types except "normal" and "dialog" has this on.)
#
#   full-shadow:::
#     Controls whether shadow is drawn under the parts of the window that you
#     normally won't be able to see. Useful when the window has parts of it
#     transparent, and you want shadows in those areas.
#
#   clip-shadow-above:::
#     Controls whether shadows that would have been drawn above the window should
#     be clipped. Useful for dock windows that should have no shadow painted on top.
#
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection,
#     you can set this to `true`.
#
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; clip-shadow-above = true; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.8; }
  dropdown_menu = { opacity = 0.8; }
};
